---
import type { ScheduleEvent as TScheduleEvent } from '#/data/schedule';
import EventItem from './EventItem.astro';

interface Props {
  events: TScheduleEvent[];
  date?: Date;
  locale?: Intl.UnicodeBCP47LocaleIdentifier;
  dateHeaderFormat?: Intl.DateTimeFormatOptions['weekday'];
}

const {
  events = [],
  date = new Date(),
  locale = 'en-EN',
  dateHeaderFormat = 'short'
} = Astro.props;

// @ts-expect-error - getWeekInfo is not widely supported yet, so there are no types for it
const firstDayOfWeek = new Intl.Locale(locale).getWeekInfo?.()?.firstDay ?? 1;
const dayNames = (() => {
  const formatter = new Intl.DateTimeFormat(locale, { weekday: dateHeaderFormat });

  // Create date adjusted to the first day of the week of the locale, using as reference a known monday date
  const baseDate = new Date(2025, 0, 6); // Lunes, 6 de enero de 2025

  // Adjust to the locale's first day of week
  const adjustment = (firstDayOfWeek === 7 ? 0 : firstDayOfWeek) - 1;
  baseDate.setDate(baseDate.getDate() - baseDate.getDay() + 1 + adjustment);

  /**
   * Starting from the locale's first day of week, generate the names of the week days
   * in the specified locale.
   */
  const weekDays = Array.from({ length: 7 }, (_, i) => {
    const date = new Date(baseDate);
    date.setDate(baseDate.getDate() + i);
    return formatter.format(date);
  });

  return weekDays;
})();

/**
 * Creates a localized week title using Intl.DateTimeFormat with a template
 * that tries to automatically detect the week pattern from the locale.
 */
function formatWeekTitle(startDate: Date): string {
  const formatter = new Intl.DateTimeFormat(locale, {
    month: 'long'
  });

  return formatter.format(startDate);
}

/**
 * For formatting in the time column, we use a 24-hour format without AM/PM.
 */
function formatHour(hour: number): string {
  const date = new Date();
  date.setHours(hour, 0, 0, 0);

  const formatter = new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    minute: '2-digit',
    hour12: false
  });

  return formatter.format(date);
}

function getWeekDays(date: Date): Date[] {
  const startOfWeek = new Date(date);

  // Calculate the start of the week based on locale's first day
  const currentDay = startOfWeek.getDay();
  const adjustedFirstDay = firstDayOfWeek === 7 ? 0 : firstDayOfWeek; // Convert to JS week format (0=Sunday)
  const daysFromFirstDay = (currentDay - adjustedFirstDay + 7) % 7;

  startOfWeek.setDate(startOfWeek.getDate() - daysFromFirstDay);

  const days = [];
  for (let i = 0; i < 7; i++) {
    const day = new Date(startOfWeek);
    day.setDate(startOfWeek.getDate() + i);
    days.push(day);
  }
  return days;
}

const weekDays = getWeekDays(date);

// Group events by day using Object.groupBy
const eventsByDateKey = Object.groupBy(events, (event) => {
  const eventDate = new Date(event.startTime);
  return `${eventDate.getFullYear()}-${eventDate.getMonth()}-${eventDate.getDate()}`;
});

const eventsByDay = weekDays.map((day) => {
  const dayKey = `${day.getFullYear()}-${day.getMonth()}-${day.getDate()}` as `${number}-${number}-${number}`;
  return {
    date: day,
    events: eventsByDateKey[dayKey] || []
  };
});

// Hours from 8 AM to 8 PM
const hours = Array.from({ length: 13 }, (_, i) => i + 8);
---
<div class="h-full min-h-125 w-full lg:min-h-150">
  <div class="h-full flex flex-col overflow-hidden rounded-xl bg-white shadow-md">
    <div class="border-b border-gray-200 bg-gray-50 px-6 py-5">
      <h3 class="m-0 text-xl text-gray-800 font-semibold">{formatWeekTitle(weekDays[0]!)}</h3>
    </div>

    <div class="grid grid-cols-[80px_repeat(7,1fr)] flex-1 overflow-hidden lg:grid-cols-[60px_repeat(7,1fr)] md:grid-cols-[50px_repeat(7,1fr)]">
      {/* Time column */}
      <div class="border-r border-gray-200 bg-gray-50">
        <div class="h-20 border-b border-gray-200 bg-gray-50 lg:h-16 md:h-12"></div>
        {hours.map(hour => (
          <div class="relative h-16 flex items-start justify-center border-b border-gray-100 pt-2 lg:h-12 md:h-10">
            <span class="text-xs text-gray-500 font-medium lg:text-[10px]">{formatHour(hour)}</span>
          </div>
        ))}
      </div>

      {/* Day columns */}
      {eventsByDay.map(({ date, events }, dayIndex) => (
        <div class="relative border-r border-gray-200 last:border-r-0">
          <div class="h-20 flex flex-col items-center justify-center border-b border-gray-200 bg-gray-50 font-semibold lg:h-16 md:h-12 md:px-1">
            <div class="mb-1 text-sm text-gray-500 lg:text-xs md:text-[10px]">{dayNames[dayIndex]}</div>
            <div class="text-lg text-gray-800 lg:text-base md:text-sm">{date.getDate()}</div>
          </div>

          <div class="relative h-[832px] lg:h-[624px] md:h-[520px]">
            {hours.map(() => (
              <div class="h-16 border-b border-gray-100 lg:h-12 md:h-10"></div>
            ))}
            {events.map(event => <EventItem event={event} locale={locale} />)}
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

---
import { Image } from 'astro:assets';
import BSlot from '@/components/utils/BSlot.astro';
import Button from '@/components/ui/Button/Button.astro';
import type { Hero as Props } from '@/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image,

  id,
  bg = await Astro.slots.render('bg')
} = Astro.props;
---

<section class="relative md:-mt-20 not-prose bg-dark dark" {...id ? { id } : {}}>
  <div class="absolute top-0 right-0 left-0 bottom-0 w-full h-full pointer-events-none" aria-hidden="true">
    <BSlot class="absolute top-0 right-0 left-0 bottom-0 w-full h-full object-cover opacity-30 mask-image">
      <slot name="bg">
        {bg && <Fragment set:html={bg} />}
      </slot>
    </BSlot>
  </div>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="py-12 md:py-20">
      <div class={`text-center pb-10 md:pb-16 mx-auto ${content ? 'lg:flex' : 'max-w-5xl'}`}>
        {content && (
          <div>
            <Fragment set:html={content} />
          </div>
        )}
        <div class={subtitle && 'text-shadow'}>
          {
            tagline && (
              <p
                class="text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase"
                set:html={tagline}
              />
            )
          }
          {
            title && (
              <h1
                class="text-5xl md:text-6xl font-bold leading-tight tracking-tighter mb-4 font-heading dark:text-gray-200"
                set:html={title}
              />
            )
          }
          <div class="max-w-3xl mx-auto">
            {subtitle && <p class="text-xl mb-6 dark:text-slate-300" set:html={subtitle} />}
            {
              actions && (
                <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4">
                  {Array.isArray(actions)
                    ? (
                        actions.map(action => (
                          <div class="flex w-full sm:w-auto">
                            <Button {...(action || {})} class="w-full sm:mb-0" />
                          </div>
                        ))
                      )
                    : (
                        <Fragment set:html={actions} />
                      )}
                </div>
              )
            }
          </div>
        </div>
      </div>
      <div>
        {
          image && (
            <div class="relative m-auto max-w-5xl">
              {/* @ts-expect-error - Track https://github.com/withastro/astro/issues/10780 */}
              <Image
                class="mx-auto rounded-md w-full"
                widths={[400, 768, 1024, 2040]}
                sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                loading="eager"
                width={1024}
                height={576}
                {...image}
              />
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>

<style>
@media (min-width: 768px) {
  .mask-image {
    mask-image: linear-gradient(
      to bottom,
      hsla(0, 0%, 0%, 0) 0%,
      hsla(0, 0%, 0%, 0.182) 5.6%,
      hsla(0, 0%, 0%, 0.34) 9.9%,
      hsla(0, 0%, 0%, 0.476) 13.1%,
      hsla(0, 0%, 0%, 0.593) 15.7%,
      hsla(0, 0%, 0%, 0.69) 17.9%,
      hsla(0, 0%, 0%, 0.771) 20.2%,
      hsla(0, 0%, 0%, 0.836) 22.9%,
      hsla(0, 0%, 0%, 0.888) 26.3%,
      hsla(0, 0%, 0%, 0.927) 30.8%,
      hsla(0, 0%, 0%, 0.956) 36.7%,
      hsla(0, 0%, 0%, 0.976) 44.4%,
      hsla(0, 0%, 0%, 0.989) 54.3%,
      hsla(0, 0%, 0%, 0.996) 66.6%,
      hsla(0, 0%, 0%, 0.999) 81.7%,
      hsl(0, 0%, 0%) 100%
    );
  }
}

.text-shadow {
  background:
    radial-gradient(
      ellipse closest-side,
      rgb(var(--aw-color-bg-page) / 0.8) 0%,
      rgb(var(--aw-color-bg-page) / 0.75) 30%,
      rgb(var(--aw-color-bg-page) / 0.65) 50%,
      rgb(var(--aw-color-bg-page) / 0.4) 85%,
      rgb(var(--aw-color-bg-page) / 0.3) 92%,
      rgb(var(--aw-color-bg-page) / 0.15) 95%,
      rgb(var(--aw-color-bg-page) / 0.08) 97%,
      rgb(var(--aw-color-bg-page) / 0) 100%
    )
  ;
}
</style>

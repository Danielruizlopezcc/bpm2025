---
import type { ItemGrid as Props } from '@/types';
import { twMerge } from 'tailwind-merge';
import Button from '@/components/ui/Button/Button.astro';
import BSlot from '@/components/utils/BSlot.astro';

const { items = [], columns, classes = {} } = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary'
} = classes;

const mergedIconClasses = twMerge('mb-2 w-10 h-10', defaultIconClass);
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon: IconElement, callsToAction, classes: itemClasses = {} }) => (
        <div class={twMerge('relative flex flex-col', panelClass, itemClasses?.panel)}>
          {IconElement
            ? <IconElement class={twMerge(mergedIconClasses, itemClasses?.icon)} />
            : (
                <BSlot class={twMerge(mergedIconClasses, itemClasses?.icon)}>
                  <slot name="icon" />
                </BSlot>
              )}
          <div class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</div>
          {description && (
            <p class={twMerge('text-muted mt-2', descriptionClass, itemClasses?.description)} set:html={description} />
          )}
          {callsToAction && callsToAction.length && (
            <div class="flex">
              {callsToAction.map(act => (
                <div class="mt-2">
                  <Button {...act} />
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
